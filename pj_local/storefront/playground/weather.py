# -*- coding: utf-8 -*-
"""氣象 副程式集(CWB+天險)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15_KbzPH0Wpk43tLzNbMwKD5BO8-Q9-Yp
"""

from datetime import datetime
from datetime import timedelta
import numpy as np
import requests
import math

"""# 觀測 - 溫度 風速 濕度 體感溫度 降雨 空汙 天氣狀況"""

def obs(lon,lat):

  #局屬、自動
  url_cwb = 'https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=CWB-800E53EB-AF03-4977-99E7-0C1F2AE8BFB7&format=JSON&stationId=466850,466880,466900,466910,466920,466930,466940,467050&elementName=WDSD,TEMP,HUMD,VIS,Weather&parameterName='
  url_auto = 'https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0001-001?Authorization=CWB-800E53EB-AF03-4977-99E7-0C1F2AE8BFB7&format=JSON&stationId=C0A520,C0A530,C0A540,C0A550,C0A560,C0A570,C0A640,C0A650,C0A660,C0A770,C0A860,C0A870,C0A880,C0A890,C0A920,C0A931,C0A940,C0A950,C0A970,C0A980,C0A9C0,C0A9F0,C0AC40,C0AC60,C0AC70,C0AC80,C0ACA0,C0AD00,C0AD10,C0AD30,C0AD40,C0AD50,C0AG80,C0AH00,C0AH10,C0AH30,C0AH40,C0AH50,C0AH70,C0AH80,C0AH90,C0AI00,C0AI10,C0AI20,C0AI30,C0AI40,C0AJ10,C0AJ20,C0AJ30,C0AJ40,C0AJ50,C0B010,C0B040,C0B050,C0C460,C0C480,C0C490,C0C590,C0C620,C0C630,C0C650,C0C660,C0C670,C0C680,C0C700,C0C710,C0C720,C0C730,C0C740,C1A630,C1A750,C1A760,C1A9N0,C1AC50,C1AI50,C1AI60,C1C510&elementName=WDSD,TEMP,HUMD&parameterName='
  url_list = [url_cwb,url_auto]
  diff_list = [] 
  wdsd_list = []
  temp_list = []
  humd_list = []
  app_temp_list = []

   #從局屬與自動中找較近的測站
  for url in url_list:
    data = requests.get(url)
    data_json = data.json()
    location = data_json['records']['location']
    min_station_diff = 99999
    for i in location:
      i_lat = i['lat']
      i_lon = i['lon']
      station_diff = np.sqrt( np.square(float(i_lon)-float(lon)) + np.square(float(i_lat)-float(lat)) )
      if station_diff < min_station_diff:
        min_station_diff = station_diff
        sta_num = i
          
    wdsd = float(sta_num['weatherElement'][0]['elementValue'])
    temp = float(sta_num['weatherElement'][1]['elementValue'])
    humd = round(float(sta_num['weatherElement'][2]['elementValue'] )*100 ,1)
    app_temp = 1.07*temp+(0.2*humd/100*6.105*math.exp(17.27*temp/(237.7+temp)))-0.65*wdsd-2.7
  
    diff_list.append(min_station_diff)
    wdsd_list.append(wdsd)
    temp_list.append(temp)
    humd_list.append(humd)
    app_temp_list.append(app_temp)

  if diff_list[0]<diff_list[1] :
    wdsd_final = wdsd_list[0]
    temp_final = temp_list[0]
    humd_final = humd_list[0]
    app_temp_final = app_temp_list[0]

  else :
    wdsd_final = wdsd_list[1]
    temp_final = temp_list[1]
    humd_final = humd_list[1]
    app_temp_final = app_temp_list[1]


  #自動雨量 (回傳值-998.00 表示無降雨)
  url_autorain = 'https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0002-001?Authorization=CWB-800E53EB-AF03-4977-99E7-0C1F2AE8BFB7&format=JSON&stationId=C0A520,C0A530,C0A540,C0A550,C0A560,C0A570,C0A640,C0A650,C0A660,C0A770,C0A860,C0A870,C0A880,C0A890,C0A920,C0A931,C0A940,C0A950,C0A970,C0A980,C0A9C0,C0A9F0,C0AC40,C0AC60,C0AC70,C0AC80,C0ACA0,C0AD00,C0AD10,C0AD30,C0AD40,C0AD50,C0AG80,C0AH00,C0AH10,C0AH30,C0AH40,C0AH50,C0AH70,C0AH80,C0AH90,C0AI00,C0AI10,C0AI20,C0AI30,C0AI40,C0AJ10,C0AJ20,C0AJ30,C0AJ40,C0AJ50,C0B010,C0B040,C0B050,C0C460,C0C480,C0C490,C0C590,C0C620,C0C630,C0C650,C0C660,C0C670,C0C680,C0C700,C0C710,C0C720,C0C730,C0C740,C1A630,C1A750,C1A760,C1A9N0,C1AC50,C1AI50,C1AI60,C1C510&elementName=RAIN&parameterName='
  data = requests.get(url_autorain)
  data_json = data.json()
  location = data_json['records']['location']
  min_station_diff = 99999
  for i in location:
    i_lat = i['lat']
    i_lon = i['lon']
    station_diff = np.sqrt( np.square(float(i_lon)-float(lon)) + np.square(float(i_lat)-float(lat)) )
    if station_diff < min_station_diff:
      min_station_diff = station_diff
      sta_num = i     
  rain = sta_num['weatherElement'][0]['elementValue']


  #能見度與天氣狀況
  url_weather = 'https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=CWB-800E53EB-AF03-4977-99E7-0C1F2AE8BFB7&format=JSON&stationId=466850,466880,466900,466910,466920,466930,466940,467050&elementName=WDSD,TEMP,HUMD,VIS,Weather&parameterName='
  data = requests.get(url_weather)
  data_json = data.json()
  location = data_json['records']['location']
  min_station_diff = 99999
  for i in location:
    i_lat = i['lat']
    i_lon = i['lon']
    station_diff = np.sqrt( np.square(float(i_lon)-float(lon)) + np.square(float(i_lat)-float(lat)) )
    if station_diff < min_station_diff:
      min_station_diff = station_diff
      sta_num = i
  VIS = sta_num['weatherElement'][3]['elementValue']
  weather = sta_num['weatherElement'][4]['elementValue']


  #空汙
  url_aqi = 'https://data.epa.gov.tw/api/v2/aqx_p_432?api_key=668a6684-c173-483e-a05c-03b993655ce4'
  data = requests.get(url_aqi)
  data_json = data.json()
  location = data_json['records']
  min_station_diff = 99999
  for i in location:
    i_lat = i['latitude']
    i_lon = i['longitude']
    station_diff = np.sqrt( np.square(float(i_lon)-float(lon)) + np.square(float(i_lat)-float(lat)) )
    if station_diff < min_station_diff:
      min_station_diff = station_diff
      sta_num = i
  aqi = sta_num['aqi']  


  #建立氣象dict
  obs = { 'temp(C)': temp_final,
        'wdsd(m/s)': wdsd_final,
        'humd(%)': humd_final,
        'app_temp': '%.2f' %app_temp_final,
        'rain(mm/day)': rain,
        'aqi': aqi,
        'VIS': VIS,  
        'weather': weather
      }
  print(obs)
  return

"""# 預報 - 溫度 風速 濕度 體感溫度 降雨 天氣狀況



"""

def forcast(now_time, time_step, lon, lat):

    url = 'https://premium-weather-api.weatherrisk.com/future-3t/168hr-3km-model-forecast/'+lat+','+lon
    data = requests.get(url)
    data_json = data.json()
    forcast_data = data_json['data']
    issue_time = data_json['data'][0]['issue_time']

    #計算after_time & 距issue_time為幾小時
    time_step_new = timedelta(seconds=int(time_step))  #s轉hh:mm:ss
    now_time_new = datetime.strptime(now_time,'%Y-%m-%d %H:%M:%S')
    to_UTC = timedelta(hours=8)
    after_time = str(now_time_new - to_UTC + time_step_new)
    time_1 = datetime.strptime(issue_time, '%Y-%m-%dT%H:%M:00+00:00')
    time_2 = datetime.strptime(after_time,'%Y-%m-%d %H:%M:%S')
    time_interval = str(time_2-time_1)

    #將'00day,00:00:00'轉換為00hours
    b = time_interval.find(' day')
    c = time_interval.find(':')
    if b == -1:
      hour = int(time_interval[c-1:c])
    else:
      hour = int(time_interval[0:b])*24+int(time_interval[c-2:c])

    #抓取json資料
    pcpn = data_json['data'][hour]['pcpn']           #降雨量
    humd = data_json['data'][hour]['rh']            #濕度
    temp = data_json['data'][hour]['tempture']         #溫度
    weather = data_json['data'][hour]['weather_condition']   #天氣狀態(晴朗、晴時多雲、多雲時晴...)
    wdsd = data_json['data'][hour]['wind_speed']        #風速
    app_temp = 1.07*temp+(0.2*humd/100*6.105*math.exp(17.27*temp/(237.7+temp)))-0.65*wdsd-2.7   #體感溫度

    #預報字典  
    forcast = { 'temp(C)': temp,
          'wdsd(m/s)': wdsd,
          'humd(%)': humd,
          'app_temp': '%.2f' %app_temp,
          'rain(mm)': pcpn,
          'weather': weather
        }
    print(forcast)
    result = forcast
    #forcasst()
    return forcast

def get_weather_data(now_time, time_step, lon, lat):
  
  a=obs(lon,lat)
  b=forcast(now_time, time_step, lon, lat)
  
  return a,b

# now_time = input('now_time(yyyy-mm-dd hh:mm:ss): ') #台灣時間 要改UTC -08:00
# time_step = input('time_step(seconds): ')  #總秒數
# lon = input('lon: ')
# lat = input('lat: ')
# get_weather_data(now_time, time_step, lon, lat)

# now_time(yyyy-mm-dd hh:mm:ss): 2022-08-03 09:11:00
# time_step(seconds): 16224
# lon: 121.5407174
# lat: 25.0519979

# obs(121.5407174,25.0519979)
# now_time=(datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-7])
# print('now_time=',now_time)
# print('now_time_type=',type(now_time))
# time_step=str(0)
# forcast("2022-08-03 09:55:00", time_step,str(121.5328061), str(25.0366729))